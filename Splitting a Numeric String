// C++ program to split a numeric
// string in an Increasing
// sequence if possible
#include <bits/stdc++.h>
using namespace std;

// Function accepts a string and
// checks if string can be split.
void split(string str)
{
	int len = str.length();

	// if there is only 1 number
	// in the string then
	// it is not possible to split it
	if (len == 1) {
		cout << ("Not Possible");
		return;
	}

	string s1 = "", s2 = "";
	long num1, num2;

	for (int i = 0; i <= len / 2; i++) {

		int flag = 0;

		// storing the substring from
		// 0 to i+1 to form initial
		// number of the increasing sequence
		s1 = str.substr(0, i + 1);
		num1 = stoi((s1));
		num2 = num1 + 1;

		// convert string to integer
		// and add 1 and again convert
		// back to string s2
		s2 = to_string(num2);
		int k = i + 1;
		while (flag == 0) {
			int l = s2.length();

			// if s2 is not a substring
			// of number than not possible
			if (k + l > len) {
				flag = 1;
				break;
			}

			// if s2 is the next substring
			// of the numeric string
			if ((str.substr(k, k + l) == s2)) {
				flag = 0;

				// Increase num2 by 1 i.e the
				// next number to be looked for
				num2++;
				k = k + l;

				// check if string is fully
				// traversed then break
				if (k == len)
					break;
				s2 = to_string(num2);
				l = s2.length();
				if (k + 1 > len) {

					// If next string doesnot occurs
					// in a given numeric string
					// then it is not possible
					flag = 1;
					break;
				}
			}

			else
				flag = 1;
		}

		// if the string was fully traversed
		// and conditions were satisfied
		if (flag == 0) {
			cout << "Possible " << s1 << endl;
			break;
		}

		// if conditions failed to hold
		else if (flag == 1 && i > len / 2 - 1) {
			cout << "Not Possible" << endl;
			break;
		}
	}
}

// Driver code
int main()
{
	string str = "99100";

	// Call the split function
	// for splitting the string
	split(str);

	return 0;
}

// This code is contributed by divyeshrabadiya07
